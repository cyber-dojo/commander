#!/usr/bin/env bash
set -Eeu

# - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# The cyber-dojo script cats this out of a commander
# container and runs it locally from a /tmp dir.
# - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Most commands delegate to back to a commander container
# and can pick up and forward local env-vars.
# A few commands are handled locally, on the host.
#   1) ./cyber-dojo start-point create NAME --custom <url>...
#      This is to allow the <url>s to be local.
#   2) ./cyber-dojo sh web
#      This is because the shell is interactive.
# - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Does not export env-vars as they'd be visible to
# extract_and_run() scripts.
# - - - - - - - - - - - - - - - - - - - - - - - - - - - -

if [ "${1:-}" == '--debug' ]; then
  shift
  readonly debug_option='--debug'
fi
if [ "$(uname)" == "Darwin" ]; then
  readonly on_mac='--on_mac'
fi

commander_image()
{
  # The cyber-dojo script passes the CYBER_DOJO_COMMANDER_TAG env-var.
  echo "cyberdojo/commander:${CYBER_DOJO_COMMANDER_TAG}"
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - -
delegate_to_commander()
{
  exit_unless_env_file_exists CYBER_DOJO_NGINX_ENV "${CYBER_DOJO_NGINX_ENV:-}"
  exit_unless_env_file_exists CYBER_DOJO_WEB_ENV   "${CYBER_DOJO_WEB_ENV:-}"

  docker run \
    --entrypoint "" \
    --env CYBER_DOJO_SWARM \
    --env CYBER_DOJO_NGINX_IMAGE \
    --env CYBER_DOJO_NGINX_TAG   \
    --env CYBER_DOJO_NGINX_ENV   \
    --env CYBER_DOJO_WEB_IMAGE \
    --env CYBER_DOJO_WEB_TAG   \
    --env CYBER_DOJO_WEB_ENV   \
    --rm \
    --user=root \
    --volume=/var/run/docker.sock:/var/run/docker.sock \
    $(volume_env_file nginx "${CYBER_DOJO_NGINX_ENV:-}") \
    $(volume_env_file web   "${CYBER_DOJO_WEB_ENV:-}") \
      "$(commander_image)" \
        /app/cyber-dojo.rb ${debug_option:-} ${on_mac:-} "$@"
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
exit_unless_env_file_exists()
{
  local -r name="${1}"
  local -r path="${2}"
  if [ -n "${path}" ]; then
    exit_unless_env_file_exists_on_host "${name}" "${path}"
  fi
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
exit_unless_env_file_exists_on_host()
{
  local -r name="${1}"
  local -r path="${2}"
  if [ ! -f "${path}" ]; then
    local -r where='on the host'
    echo_env_var_error "${name}" "${path}" "${where}"
    exit 3
  fi
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
echo_env_var_error()
{
  local -r name="${1}"
  local -r path="${2}"
  local -r where="${3}"
  >&2 echo 'ERROR: bad environment variable'
  >&2 echo "${name}=${path}"
  >&2 echo "does not exist (${where})"
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
volume_env_file()
{
  local -r name="${1}"
  local -r path="${2}"
  if [ -n "${path}" ]; then
    echo "--volume=${path}:/app/env_files/custom.${name}.env:ro"
  fi
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
extract_and_run()
{
  local -r script="${1}"
  shift
  docker run \
    --entrypoint "" \
    --env CYBER_DOJO_START_POINTS_BASE_IMAGE  \
    --env CYBER_DOJO_START_POINTS_BASE_SHA    \
    --env CYBER_DOJO_START_POINTS_BASE_TAG    \
    --env CYBER_DOJO_START_POINTS_BASE_DIGEST \
    --env CYBER_DOJO_DEBUG \
    --interactive \
    --rm \
    --volume=/var/run/docker.sock:/var/run/docker.sock \
    "$(commander_image)" \
      sh -c "/app/sh/cat-${script}" \
        > ./${script}
  bash ./${script} "$@"
  exit $?
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ "${1:-} ${2:-}" == 'start-point create' ]; then
  extract_and_run start-point-create.sh "$@"
elif [ "${1:-} ${2:-}" == 'start-point build' ]; then
  extract_and_run start-point-build.sh "$@"
elif [ "${1:-}" == 'sh' ]; then
  extract_and_run sh.sh "$@"
elif ! delegate_to_commander "$@"; then
  exit 5
fi

exit 0
