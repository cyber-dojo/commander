#!/usr/bin/env bash

# - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# The main cyber-dojo script.
# Delegates to cyber-dojo-inner.
# A [cyber-dojo update] does not update this script.
#
# NB: Does not export any env-vars as they'd be visible to,
#     and easily break, older versions of cyber-dojo-inner
#     (and scripts it extracts+runs), eg in regression tests.
# NB: There are [cyber-dojo update] regression tests which
#     move back in time to old versioner images predating:
#     o) the CYBER_DOJO_COMMANDER_TAG env-var being added
#        to the .env file; so commander_tag() is careful
#        to use the original CYBER_DOJO_COMMANDER_SHA.
#     o) the versioner image having its own ENTRYPOINT;
#        so commander() tag is very careful in how it extracts
#        the env-vars.
# - - - - - - - - - - - - - - - - - - - - - - - - - - - -

commander_tag()
{
  # Note: do not add the flag '--platform linux/amd64' in the 'docker run'
  # call below; it breaks repo whose tests create their own 'fake' cyberdojo/versioner:latest
  local -r versioner=cyberdojo/versioner:latest
  local -r env_vars=$(docker run --entrypoint=cat --rm ${versioner} /app/.env)
  local -r name=CYBER_DOJO_COMMANDER_SHA
  local -r env_var=$(echo "${env_vars}" | grep "${name}")
  printf "${env_var:${#name}+1:7}"
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - -
readonly COMMANDER_TAG="$(commander_tag)"
readonly SCRIPT=cyber-dojo-inner
readonly TMP_DIR="$(mktemp -d /tmp/commander.XXXXXXX)"
remove_tmp_dir() { rm -rf "${TMP_DIR}" > /dev/null; }
trap remove_tmp_dir INT EXIT

cd "${TMP_DIR}"

docker run \
  --entrypoint cat \
  --rm \
  cyberdojo/commander:${COMMANDER_TAG} \
    /app/${SCRIPT} \
      > ./${SCRIPT}

CYBER_DOJO_COMMANDER_TAG=${COMMANDER_TAG} \
  bash ./${SCRIPT} "$@"
